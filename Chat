def _build_intent_parameters(self, label: str, doc, start: int, end: int, 
                           all_ids: list, original_input: str, cleaned_input: str) -> dict:
    """Fixed parameter extraction for field operations"""
    
    params = {'tc_ids': all_ids}
    
    if label in ["SELECT_FIELD", "SEARCH_FIELD"]:
        # For field operations, extract from ORIGINAL input, not cleaned
        print(f"[PARAM DEBUG] Original input: '{original_input}'")
        print(f"[PARAM DEBUG] Label: {label}")
        
        # Simple approach - find command word and take everything after it
        original_lower = original_input.lower()
        
        # Find the command word position
        command_patterns = [
            'select ', 'choose ', 'pick ', 'search ', 'find ',
            'switch to ', 'go to ', 'use '
        ]
        
        target = ""
        for pattern in command_patterns:
            if pattern in original_lower:
                # Take everything after the command
                split_pos = original_lower.find(pattern) + len(pattern)
                target = original_input[split_pos:].strip()
                break
        
        # Fallback - if no command found, take last word(s)
        if not target:
            words = original_input.split()
            if len(words) > 1:
                target = words[-1]  # Take last word
        
        params['target'] = target
        print(f"[PARAM DEBUG] Extracted target: '{target}'")
    
    else:
        # For other intents, use existing logic
        remaining_tokens = [token.text for i, token in enumerate(doc) if i < start or i >= end]
        if remaining_tokens:
            params['target'] = ' '.join(remaining_tokens).strip()
        elif end < len(doc):
            params['target'] = ' '.join([token.text for token in doc[end:]]).strip()
        else:
            params['target'] = cleaned_input
    
    return params
